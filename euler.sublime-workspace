{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"digits",
				"digits-to-int"
			],
			[
				"parti",
				"partition-by"
			],
			[
				"ident",
				"identity"
			],
			[
				"let",
				"letfn"
			],
			[
				"laz",
				"lazy-seq"
			],
			[
				"pow",
				"pow10"
			],
			[
				"do",
				"doall"
			],
			[
				"B",
				"bigint"
			],
			[
				"Num",
				"num"
			],
			[
				"sieve",
				"sieve-until"
			],
			[
				"clo",
				"clojure.set"
			],
			[
				"sorted",
				"sorted-set"
			],
			[
				"print",
				"println"
			],
			[
				"vec",
				"vector"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/euler/problem35.clj",
			"settings":
			{
				"buffer_size": 1121,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#<CompilerException clojure.lang.ArityException: Wrong number of args (3) passed to: core$int, compiling:(euler/problem2.clj:15:1)>\nnREPL server started on port 34950\nREPL-y 0.1.10\nClojure 1.5.1\n    Exit: Control+D or (exit) or (quit)\nCommands: (user/help)\n    Docs: (doc function-name-here)\n          (find-doc \"part-of-name-here\")\n  Source: (source function-name-here)\n          (user/sourcery function-name-here)\n Javadoc: (javadoc java-object-or-class-here)\nExamples from clojuredocs.org: [clojuredocs or cdoc]\n          (user/clojuredocs name-here)\n          (user/clojuredocs \"ns-here\" \"name-here\")\neuler.core=> \n(defn log10 [n]\n	(int (+ 0.00000001 (/ (Math/log n) (Math/log 10)))))\n\n(defn pow10 [n] \n	(apply * (repeat n 10)))\n\n(defn lazy-primes []\n    (let [next-prime\n        (fn next-prime [x xs] \n          (if (some #(zero? (rem x %)) (take-while #(<= (* % %) x) xs))\n              (recur (+ x 2) xs)\n              (cons x (lazy-seq (next-prime (+ x 2) (conj xs x))))))]\n            (cons 2 (lazy-seq (next-prime 3 [])))))\n\n(defn prime? [n]\n      (.isProbablePrime (BigInteger/valueOf n) 5))\n\n(defn int-to-digits \n	(\n		[n start]\n			(map (fn [[a b]] (int(/ b a))) \n				(take-while (fn [[a b]] (>= a 1)) \n					(iterate (fn [[a b]] [(/ a 10) (- b (* a (int (/ b a))))]) [start n]))))\n	(	[n] \n			(int-to-digits n (pow10 (log10 n)))))\n\n(defn digits-to-int [digits]\n	(reduce #(+ (* %1 10) %2)  digits))\n\n(defn permutate [n]\n	(let [digits (inc (log10 n))]\n		(for [x (range digits)] (digits-to-int (take digits (drop x (cycle (int-to-digits n))))))))\n\n(defn circular-prime? [n]\n	(every? prime? (permutate n)))\n\n(defn count-circular-primes [n]\n	(count (filter circular-prime? (take-while #(< % n) (lazy-primes)))))\n\n\n\n\neuler.core=> (defn log10 [n]\n        #_=> (int (+ 0.00000001 (/ (Math/log n) (Math/log 10)))))\n#'euler.core/log10\neuler.core=> \n\neuler.core=> (defn pow10 [n] \n        #_=> (apply * (repeat n 10)))\n#'euler.core/pow10\neuler.core=> \n\neuler.core=> (defn lazy-primes []\n        #_=>     (let [next-prime\n        #_=>         (fn next-prime [x xs] \n        #_=>           (if (some #(zero? (rem x %)) (take-while #(<= (* % %) x)  xs))\n        #_=>               (recur (+ x 2) xs)\n        #_=>               (cons x (lazy-seq (next-prime (+ x 2) (conj xs x))))) )]\n        #_=>             (cons 2 (lazy-seq (next-prime 3 [])))))\n#'euler.core/lazy-primes\neuler.core=> \n\neuler.core=> (defn prime? [n]\n        #_=>       (.isProbablePrime (BigInteger/valueOf n) 5))\n#'euler.core/prime?\neuler.core=> \n\neuler.core=> (defn int-to-digits \n        #_=> (\n        #_=> [n start]\n        #_=> (map (fn [[a b]] (int(/ b a))) \n        #_=> (take-while (fn [[a b]] (>= a 1)) \n        #_=> (iterate (fn [[a b]] [(/ a 10) (- b (* a (int (/ b a))))]) [start n ]))))\n        #_=> ([n] \n        #_=> (int-to-digits n (pow10 (log10 n)))))\n#'euler.core/int-to-digits\neuler.core=> \n\neuler.core=> (defn digits-to-int [digits]\n        #_=> (reduce #(+ (* %1 10) %2)  digits))\n#'euler.core/digits-to-int\neuler.core=> \n\neuler.core=> (defn permutate [n]\n        #_=> (let [digits (inc (log10 n))]\n        #_=> (for [x (range digits)] (digits-to-int (take digits (drop x (cycle  (int-to-digits n))))))))\n#'euler.core/permutate\neuler.core=> \n\neuler.core=> (defn circular-prime? [n]\n        #_=> (every? prime? (permutate n)))\n#'euler.core/circular-prime?\neuler.core=> \n\neuler.core=> (defn count-circular-primes [n]\n        #_=> (count (filter circular-prime? (take-while #(< % n) (lazy-primes))) ))\n#'euler.core/count-circular-primes\neuler.core=> \n\neuler.core=> \n\neuler.core=> (time (count-circular-primes 100))\n(time (count-circular-primes 100))\n\"Elapsed time: 30.047469 msecs\"\n13\neuler.core=> (time (count-circular-primes 1000000))\n(time (count-circular-primes 1000000))\n\"Elapsed time: 51880.45903 msecs\"\n55\neuler.core=> ",
			"settings":
			{
				"buffer_size": 3816,
				"line_ending": "Unix",
				"name": "*REPL* [clojure]",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 117.0,
		"selected_items":
		[
			[
				"gitadd",
				"Git: Add Current File"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"addre",
				"Package Control: Add Repository"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"leinr",
				"Build: Lein: Run"
			],
			[
				"gitADD",
				"Git: Add Current File"
			],
			[
				"leint",
				"Build: Lein: Test"
			],
			[
				"lein",
				"Build: Lein: Test"
			],
			[
				"GITADD",
				"Git: Add Current File"
			],
			[
				"leinte",
				"Build: Lein: Test"
			],
			[
				"leinrun",
				"Build: Lein: Run"
			],
			[
				"g",
				"Git: Add Current File"
			],
			[
				"gitc",
				"Git: Commit"
			],
			[
				"gitst",
				"Git: Status"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"leir",
				"Build: Lein: Run"
			],
			[
				"leit",
				"Build: Lein: Test"
			],
			[
				"lein run",
				"Build: Lein: Run"
			],
			[
				"blt",
				"Build: Lein: Test"
			],
			[
				"blr",
				"Build: Lein: Run"
			],
			[
				"leintest",
				"Build: Lein: Test"
			],
			[
				"lein test",
				"Build: Lein: Test"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"lein ",
				"Build: Lein: Uberjar"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Inst",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 153.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/stefc/Projects/euler/src/euler/problem48.clj",
		"/home/stefc/Projects/euler/src/euler/problem40.clj",
		"/home/stefc/Projects/euler/src/euler/problem37.clj",
		"/home/stefc/Projects/euler/src/euler/problem25.clj",
		"/home/stefc/Projects/euler/src/euler/problem2.clj",
		"/home/stefc/Projects/euler/src/euler/problem17.clj",
		"/home/stefc/Projects/euler/src/euler/problem20.clj",
		"/home/stefc/Projects/euler/src/euler/problem19.clj",
		"/home/stefc/Projects/euler/data/names.txt",
		"/home/stefc/Projects/euler/src/euler/problem9.clj",
		"/home/stefc/Projects/euler/src/euler/problem11.clj",
		"/home/stefc/Projects/euler/src/euler/problem18.clj",
		"/home/stefc/Projects/euler/src/euler/core.clj",
		"/home/stefc/Projects/euler/src/euler/problem22.clj",
		"/home/stefc/Projects/euler/src/euler/problem50.clj",
		"/home/stefc/Projects/euler/src/euler/problem1.clj",
		"/home/stefc/Projects/euler/src/euler/problem3.clj",
		"/home/stefc/Projects/euler/src/euler/problem14.clj",
		"/home/stefc/Projects/euler/src/euler/problem12.clj",
		"/home/stefc/Projects/euler/src/euler/problem21.clj",
		"/home/stefc/Projects/euler/src/euler/problem13.clj",
		"/home/stefc/Projects/euler/test/euler/core_test.clj",
		"/home/stefc/Projects/euler/src/euler/problem15.clj",
		"/home/stefc/Projects/euler/src/euler/problem16.clj",
		"/home/stefc/Projects/euler/src/euler/problem8.clj",
		"/home/stefc/Projects/euler/src/euler/problem5.clj",
		"/home/stefc/Projects/euler/src/euler/problem6.clj",
		"/home/stefc/Projects/euler/src/euler/problem10.clj",
		"/home/stefc/Projects/euler/src/euler/problem7.clj",
		"/home/stefc/Projects/euler/src/euler/problem4.clj",
		"/home/stefc/Projects/euler/project.clj",
		"/home/stefc/Projects/euler/src/euler/project.clj",
		"/home/stefc/Projects/rubiks-cube/project.clj",
		"/home/stefc/Projects/rubiks-cube/src/rubiks_cube/core.clj",
		"/home/stefc/Projects/rubiks-cube/.gitignore",
		"/home/stefc/Projects/test.clj",
		"/home/stefc/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"prime?",
			"\n",
			"48",
			"prime?",
			"\n",
			"fib",
			"pow10",
			"deftest",
			"\n    ",
			"next-tuple",
			"\n",
			" "
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/euler/problem35.clj",
					"settings":
					{
						"buffer_size": 1121,
						"regions":
						{
						},
						"selection":
						[
							[
								1121,
								1121
							]
						],
						"settings":
						{
							"syntax": "Packages/Clojure/Clojure.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 529.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 3816,
						"regions":
						{
						},
						"selection":
						[
							[
								3816,
								3816
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_indent": false,
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "clojure",
							"repl_id": "3b8b840271fd47d6802ace6997861a48",
							"smart_indent": false,
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2552.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 416.0
	},
	"output.git":
	{
		"height": 166.0
	},
	"replace":
	{
		"height": 78.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
