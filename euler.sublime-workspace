{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"let",
				"letfn"
			],
			[
				"laz",
				"lazy-seq"
			],
			[
				"pow",
				"pow10"
			],
			[
				"do",
				"doall"
			],
			[
				"B",
				"bigint"
			],
			[
				"Num",
				"num"
			],
			[
				"sieve",
				"sieve-until"
			],
			[
				"clo",
				"clojure.set"
			],
			[
				"sorted",
				"sorted-set"
			],
			[
				"print",
				"println"
			],
			[
				"vec",
				"vector"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/euler/core.clj",
			"settings":
			{
				"buffer_size": 2450,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/euler/core_test.clj",
			"settings":
			{
				"buffer_size": 279,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#<CompilerException java.lang.RuntimeException: Unable to resolve symbol: if in this context, compiling:(euler/core.clj:67:2)>\nnREPL server started on port 34157\nREPL-y 0.1.10\nClojure 1.5.1\n    Exit: Control+D or (exit) or (quit)\nCommands: (user/help)\n    Docs: (doc function-name-here)\n          (find-doc \"part-of-name-here\")\n  Source: (source function-name-here)\n          (user/sourcery function-name-here)\n Javadoc: (javadoc java-object-or-class-here)\nExamples from clojuredocs.org: [clojuredocs or cdoc]\n          (user/clojuredocs name-here)\n          (user/clojuredocs \"ns-here\" \"name-here\")\neuler.core=> (defn sieve [s]\n    (cons (first s)\n          (lazy-seq (sieve (filter (fn [n] (not (zero? (mod n (first s)))))\n                                   (rest s))))))\n \n(defn primesLazy [maxPrime]\n   (take-while (fn [prime] (<= prime maxPrime)) (sieve (iterate inc 2))))\n\n(defn sieve [s]\n        #_=>     (cons (first s)\n        #_=>           (lazy-seq (sieve (filter (fn [n] (not (zero? (mod n (firs t s)))))\n        #_=>                                    (rest s))))))\n#'euler.core/sieve\neuler.core=>  \n\neuler.core=> (defn primesLazy [maxPrime]\n        #_=>    (take-while (fn [prime] (<= prime maxPrime)) (sieve (iterate inc  2))))\n#'euler.core/primesLazy\neuler.core=> \n\neuler.core=> (primesLazy 20)\n(primesLazy 20)\n(2 3 5 7 11 13 17 19)\neuler.core=> (primesLazy 13)\n(primesLazy 13)\n(2 3 5 7 11 13)\neuler.core=> (reverse(primesLazy 13))\n(reverse(primesLazy 13))\n(13 11 7 5 3 2)\neuler.core=> (def primes '(13 11 7 5 3 2))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(defn primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) (reverse accu)\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (range 2 21))))\n\n(def primes '(13 11 7 5 3 2))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (defn primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) (reverse accu)\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\nIllegalArgumentException Parameter declaration fn should be a vector  clojure.core/assert-valid-fdecl (core.clj:6732)\n\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( range 2 21))))\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: primeFactors in this context, compiling:(NO_SOURCE_PATH:1:49) \n\neuler.core=> \n\neuler.core=> (def primes '(13 11 7 5 3 2))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) (reverse accu)\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (range 2 21))))\n(def primes '(13 11 7 5 3 2))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) (reverse accu)\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( range 2 21))))\n#'euler.core/exponents\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n720720\neuler.core=> (def primes '(13 11 7 5 3 2))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (range 2 21))))\n(def primes '(13 11 7 5 3 2))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( range 2 21))))\n#'euler.core/exponents\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n725735010\neuler.core=> exponents\nexponents\n(4 2 1 1 1 1)\neuler.core=> primes\nprimes\n(13 11 7 5 3 2)\neuler.core=> (cons 4 '(1 3))\n(cons 4 '(1 3))\n(4 1 3)\neuler.core=> (conj 4 '(1 3))\n(conj 4 '(1 3))\nClassCastException java.lang.Long cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj (core.clj:83)\n\neuler.core=> (conj '(1 3) 4)\n(conj '(1 3) 4)\n(4 1 3)\neuler.core=> (map primeFactors (range 2 21))\n(map primeFactors (range 2 21))\n((1 0 0 0 0 0) (0 1 0 0 0 0) (2 0 0 0 0 0) (0 0 1 0 0 0) (1 1 0 0 0 0) (0 0 0 1 0 0) (3 0 0 0 0 0) (0 2 0 0 0 0) (1 0 1 0 0 0) (0 0 0 0 1 0) (2 1 0 0 0 0) (0 0 0 0 0 1) (1 0 0 1 0 0) (0 1 1 0 0 0) (4 0 0 0 0 0) (0 0 0 0 0 0) (1 2 0 0 0 0) (0 0 0 0 0 0) (2 0 1 0 0 0))\neuler.core=> \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n\n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=> (map primeFactors (range 2 21))\n(map primeFactors (range 2 21))\n((1 0 0 0 0 0) (0 1 0 0 0 0) (2 0 0 0 0 0) (0 0 1 0 0 0) (1 1 0 0 0 0) (0 0 0 1 0 0) (3 0 0 0 0 0) (0 2 0 0 0 0) (1 0 1 0 0 0) (0 0 0 0 1 0) (2 1 0 0 0 0) (0 0 0 0 0 1) (1 0 0 1 0 0) (0 1 1 0 0 0) (4 0 0 0 0 0) (0 0 0 0 0 0) (1 2 0 0 0 0) (0 0 0 0 0 0) (2 0 1 0 0 0))\neuler.core=> (map primeFactors '(20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2))\n(map primeFactors '(20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3  2))\n((2 0 1 0 0 0) (0 0 0 0 0 0) (1 2 0 0 0 0) (0 0 0 0 0 0) (4 0 0 0 0 0) (0 1 1 0 0 0) (1 0 0 1 0 0) (0 0 0 0 0 1) (2 1 0 0 0 0) (0 0 0 0 1 0) (1 0 1 0 0 0) (0 2 0 0 0 0) (3 0 0 0 0 0) (0 0 0 1 0 0) (1 1 0 0 0 0) (0 0 1 0 0 0) (2 0 0 0 0 0) (0 1 0 0 0 0) (1 0 0 0 0 0))\neuler.core=> (take-while #(= 2 %) (iterate dec 20))\n(take-while #(= 2 %) (iterate dec 20))\n()\neuler.core=> (take 4 (iterate dec 20))\n(take 4 (iterate dec 20))\n(20 19 18 17)\neuler.core=> (take-while #(> 2 %) (iterate dec 20))\n(take-while #(> 2 %) (iterate dec 20))\n()\neuler.core=> (take-while #(> % 2) (iterate dec 20))\n(take-while #(> % 2) (iterate dec 20))\n(20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3)\neuler.core=> (take-while #(> % 1) (iterate dec 20))\n(take-while #(> % 1) (iterate dec 20))\n(20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)\neuler.core=> (def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (take-while (> % 1) (iterate dec 20)))))\n \n\n(def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( take-while (> % 1) (iterate dec 20)))))\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: % in this context, compiling:(NO_SOURCE_PATH:1:79) \n\neuler.core=>  \n\neuler.core=> \n\neuler.core=> (def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (take-while #(> % 1) (iterate dec 20)))))\n(def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( take-while #(> % 1) (iterate dec 20)))))\n#'euler.core/exponents\neuler.core=> exponents\nexponents\n(4 2 1 1 1 1)\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n725735010\neuler.core=> (def primeFactors \n	(fn [n]\n		(loop [p primes accu '()]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n				:else (recur (rest p) (cons (divCount n (first p)) accu))))))\n  \n \n\n(def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu '()]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (cons 0 accu))\n        #_=> :else (recur (rest p) (cons (divCount n (first p)) accu))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> \n\neuler.core=> (primeFactors 22)\n(primeFactors 22)\n(1 0 0 0 1 0)\neuler.core=> (primeFactors 2)\n(primeFactors 2)\n(1 0 0 0 0 0)\neuler.core=> (primeFactors 4)\n(primeFactors 4)\n(2 0 0 0 0 0)\neuler.core=> (primes)\n(primes)\nClassCastException clojure.lang.PersistentList cannot be cast to clojure.lang.IFn  euler.core/eval1568 (NO_SOURCE_FILE:1)\n\neuler.core=> primes\nprimes\n(13 11 7 5 3 2)\neuler.core=> (def primes '(2 3 5 7 11 13))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu []]\n			(cond\n				(empty? p) (list accu)\n				(not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n				:else (recur (rest p) (conj accu (divCount n (first p))))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (take 19 (iterate inc 2)))))\n \n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n\n(def primes '(2 3 5 7 11 13))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu []]\n        #_=> (cond\n        #_=> (empty? p) (list accu)\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n        #_=> :else (recur (rest p) (conj accu (divCount n (first p))))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( take 19 (iterate inc 2)))))\n#'euler.core/exponents\neuler.core=>  \n\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\nClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.Number  clojure.lang.Numbers.gt (Numbers.java:227)\n\neuler.core=> \n\neuler.core=> primes\nprimes\n(2 3 5 7 11 13)\neuler.core=> exponents\nexponents\n()\neuler.core=> (primeFactors 2)\n(primeFactors 2)\n([1 0 0 0 0 0])\neuler.core=> (def primes '(2 3 5 7 11 13))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu []]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n				:else (recur (rest p) (conj accu (divCount n (first p))))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (take 19 (iterate inc 2)))))\n \n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n(def primes '(2 3 5 7 11 13))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu []]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n        #_=> :else (recur (rest p) (conj accu (divCount n (first p))))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( take 19 (iterate inc 2)))))\n#'euler.core/exponents\neuler.core=>  \n\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n720720\neuler.core=> exponents\nexponents\n(4 2 1 1 1 1)\neuler.core=> primes\nprimes\n(2 3 5 7 11 13)\neuler.core=> (take 19 (iterate inc 2))\n(take 19 (iterate inc 2))\n(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)\neuler.core=> (def primes '(2 3 5 7 11 13 17 19))\n \n(defn divCount [n factor]\n	(loop [x n accu 0]\n		(if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n \n(def primeFactors \n	(fn [n]\n		(loop [p primes accu []]\n			(cond\n				(empty? p) accu\n				(not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n				:else (recur (rest p) (conj accu (divCount n (first p))))))))\n  \n \n(def exponents (reduce (fn [a b] (map max a b)) (map primeFactors (take 19 (iterate inc 2)))))\n \n(apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n\n(def primes '(2 3 5 7 11 13 17 19))\n#'euler.core/primes\neuler.core=>  \n\neuler.core=> (defn divCount [n factor]\n        #_=> (loop [x n accu 0]\n        #_=> (if (zero? (rem x factor)) (recur (/ x factor) (inc accu)) accu)))\n#'euler.core/divCount\neuler.core=>  \n\neuler.core=> (def primeFactors \n        #_=> (fn [n]\n        #_=> (loop [p primes accu []]\n        #_=> (cond\n        #_=> (empty? p) accu\n        #_=> (not (zero? (rem n (first p)))) (recur (rest p) (conj accu 0))\n        #_=> :else (recur (rest p) (conj accu (divCount n (first p))))))))\n#'euler.core/primeFactors\neuler.core=>   \n\neuler.core=>  \n\neuler.core=> (def exponents (reduce (fn [a b] (map max a b)) (map primeFactors ( take 19 (iterate inc 2)))))\n#'euler.core/exponents\neuler.core=>  \n\neuler.core=> (apply * (map (fn [b e] (int(Math/pow b e))) primes exponents))\n232792560\neuler.core=> \n\neuler.core=> (defn pow [x y] (reduce * (repeat y x)))\n(defn pow10 [x] (pow 10 x))\n\n(defn split [n digits] \n	(loop [v n idx digits acc []]\n		(let [weight (pow10 (dec idx))]\n			(if(zero? idx) acc \n				(recur (- v (* weight (int(/ v weight)) )) (dec idx) (conj acc (int(/ v  weight))))))))\n\n(defn palindrom? [vec]\n	(= vec (reverse vec)))\n\n(defn search-palindrom [n digits]\n	(if(palindrom? (split n digits)) n\n		(recur (dec n) digits)))\n\n; (for [x (reverse(range 99 999)) y (reverse(range 99 999 11))] [x y]))\n(def products \n	(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(for [x (reverse(range 99 999)) y (reverse(range 99 999 11))] [x y])))\n\n(defn pow [x y] (reduce * (repeat y x)))\n#'euler.core/pow\neuler.core=> (defn pow10 [x] (pow 10 x))\n#'euler.core/pow10\neuler.core=> \n\neuler.core=> (defn split [n digits] \n        #_=> (loop [v n idx digits acc []]\n        #_=> (let [weight (pow10 (dec idx))]\n        #_=> (if(zero? idx) acc \n        #_=> (recur (- v (* weight (int(/ v weight)) )) (dec idx) (conj acc (int (/ v  weight))))))))\n#'euler.core/split\neuler.core=> \n\neuler.core=> (defn palindrom? [vec]\n        #_=> (= vec (reverse vec)))\n#'euler.core/palindrom?\neuler.core=> \n\neuler.core=> (defn search-palindrom [n digits]\n        #_=> (if(palindrom? (split n digits)) n\n        #_=> (recur (dec n) digits)))\n#'euler.core/search-palindrom\neuler.core=> \n\neuler.core=> ; (for [x (reverse(range 99 999)) y (reverse(range 99 999 11))] [x  y]))\n\neuler.core=> (def products \n        #_=> (filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (for [x (reverse(range 99 999)) y (reverse(range 99 999 11))] [x y] )))\n#'euler.core/products\neuler.core=> \n\neuler.core=> (products)\n(products)\nClassCastException clojure.lang.LazySeq cannot be cast to clojure.lang.IFn  euler.core/eval1792 (NO_SOURCE_FILE:1)\n\neuler.core=> (zipmap (range 9 15) (range 2 10))\n(zipmap (range 9 15) (range 2 10))\n{14 7, 13 6, 12 5, 11 4, 10 3, 9 2}\neuler.core=> (map (range 9 15) (range 2 10))\n(map (range 9 15) (range 2 10))\nClassCastException clojure.lang.LazySeq cannot be cast to clojure.lang.IFn  clojure.core/map/fn--4207 (core.clj:2485)\n\neuler.core=> (map (fn [a b] (a b)) (range 9 15) (range 2 10))\n(map (fn [a b] (a b)) (range 9 15) (range 2 10))\nClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  euler.core/eval1798/fn--1799 (NO_SOURCE_FILE:1)\n\neuler.core=> (map (fn [a b] (+ a b)) (range 9 15) (range 2 10))\n(map (fn [a b] (+ a b)) (range 9 15) (range 2 10))\n(11 13 15 17 19 21)\neuler.core=> (map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n(map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n((9 2) (10 3) (11 4) (12 5) (13 6) (14 7))\neuler.core=> (map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n(map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n((9 2) (10 3) (11 4) (12 5) (13 6) (14 7))\neuler.core=> (map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n(map (fn [a b] (list a b)) (range 9 15) (range 2 10))\n((9 2) (10 3) (11 4) (12 5) (13 6) (14 7))\neuler.core=> (def products \n	(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 999)))))\n(def products \n        #_=> (filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 9 99)))))\n#'euler.core/products\neuler.core=> (take 10 (products))\n(take 10 (products))\nClassCastException clojure.lang.LazySeq cannot be cast to clojure.lang.IFn  euler.core/eval1829 (NO_SOURCE_FILE:1)\n\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 999))))))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 9 99))))))\n#'euler.core/products\nRuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:219)\nRuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:219)\n\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 999))))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (+ a b)) (reverse(range 99 999)) (reverse(range 99 9 99))))\n#'euler.core/products\neuler.core=> (take 10 (products))\n(take 10 (products))\nClassCastException clojure.lang.LazySeq cannot be cast to clojure.lang.IFn  euler.core/eval1847 (NO_SOURCE_FILE:1)\n\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (+ a b)) (reverse (range 99 999)) (reverse (range 99 999))))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (+ a b)) (reverse (range 99 999)) (reverse (range 99  999))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n(1996 1994 1992 1990 1988 1986 1984 1982 1980 1978)\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (list a b)) (reverse (range 99 999)) (reverse (range 99 999))))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (list a b)) (reverse (range 99 999)) (reverse (range  99 999))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((998 998) (997 997) (996 996) (995 995) (994 994) (993 993) (992 992) (991 991) (990 990) (989 989))\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(map (fn [a b] (list a b)) (reverse (range 99 101)) (reverse (range 99 101))))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (map (fn [a b] (list a b)) (reverse (range 99 101)) (reverse (range  99 101))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((100 100) (99 99))\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(for [a (reverse (range 99 101)) b (reverse (range 99 101))] (list a b)))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (for [a (reverse (range 99 101)) b (reverse (range 99 101))] (list  a b)))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((100 100) (100 99) (99 100) (99 99))\neuler.core=> (def products \n	;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(for [a (reverse (range 99 130)) b (reverse (range 99 130))] (list a b)))\n(def products \n        #_=> ;(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (for [a (reverse (range 99 130)) b (reverse (range 99 130))] (list  a b)))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((129 129) (129 128) (129 127) (129 126) (129 125) (129 124) (129 123) (129 122) (129 121) (129 120))\neuler.core=> (def products \n	(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(for [a (reverse (range 99 130)) b (reverse (range 99 130))] (list a b))))\n(def products \n        #_=> (filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (for [a (reverse (range 99 130)) b (reverse (range 99 130))] (list  a b))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((121 110) (111 110) (110 121) (110 111) (110 101) (101 110) (100 99) (99 100))\neuler.core=> (def products \n	(filter #(palindrom? (split (* (first %) (last %)) 6 )) \n		(for [a (reverse (range 99 999)) b (reverse (range 99 999))] (list a b))))\n(def products \n        #_=> (filter #(palindrom? (split (* (first %) (last %)) 6 )) \n        #_=> (for [a (reverse (range 99 999)) b (reverse (range 99 999))] (list  a b))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n((995 583) (995 517) (993 913) (991 121) (990 101) (987 286) (987 143) (982 869) (979 664) (979 614))\neuler.core=> (map (fn [a b] (* a b)) (take 10 products))\n(map (fn [a b] (* a b)) (take 10 products))\nArityException Wrong number of args (1) passed to: core$eval2021$fn  clojure.lang.AFn.throwArity (AFn.java:437)\n\neuler.core=> (map (fn [a] (* (first a) (next b))) (take 10 products))\n(map (fn [a] (* (first a) (next b))) (take 10 products))\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: b in this context, compiling:(NO_SOURCE_PATH:1:27) \n\neuler.core=> (map (fn [a] (* (first a) (next a))) (take 10 products))\n(map (fn [a] (* (first a) (next a))) (take 10 products))\nClassCastException clojure.lang.PersistentList cannot be cast to java.lang.Number  clojure.lang.Numbers.multiply (Numbers.java:146)\n\neuler.core=> (take 10 products)\n(take 10 products)\n((995 583) (995 517) (993 913) (991 121) (990 101) (987 286) (987 143) (982 869) (979 664) (979 614))\neuler.core=> (first (take 10 products))\n(first (take 10 products))\n(995 583)\neuler.core=> (first (first (take 10 products)))\n(first (first (take 10 products)))\n995\neuler.core=> (last (first (take 10 products)))\n(last (first (take 10 products)))\n583\neuler.core=> (next (first (take 10 products)))\n(next (first (take 10 products)))\n(583)\neuler.core=> (map (fn [a] (* (first a) (last a))) (take 10 products))\n(map (fn [a] (* (first a) (last a))) (take 10 products))\n(580085 514415 906609 119911 99990 282282 141141 853358 650056 601106)\neuler.core=> (take 10 (map (fn [a] (* (first a) (last a))) products))\n(take 10 (map (fn [a] (* (first a) (last a))) products))\n(580085 514415 906609 119911 99990 282282 141141 853358 650056 601106)\neuler.core=> (reduce (fn [a b] a) (map (fn [a] (* (first a) (last a))) products))\n(reduce (fn [a b] a) (map (fn [a] (* (first a) (last a))) products) )\n580085\neuler.core=> (defn mul-pair [v] \n	(* (first v) (last v)))\n(defn mul-pair [v] \n        #_=> (* (first v) (last v)))\n#'euler.core/mul-pair\neuler.core=> (reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b) (map (fn [a] (* (first a) (last a))) products))\n(reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b) (map (fn [a ] (* (first a) (last a))) products))\n        #_=> )\n)\nArityException Wrong number of args (1) passed to: core$reduce  clojure.lang.AFn.throwArity (AFn.java:437)\n\neuler.core=> (reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b) (map (fn [a] (* (first a) (last a))) products)))\n(reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b) (map (fn [a ] (* (first a) (last a))) products)))\nArityException Wrong number of args (1) passed to: core$reduce  clojure.lang.AFn.throwArity (AFn.java:437)\n\neuler.core=> (reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) (map (fn [a] (* (first a) (last a))) products))\n(reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) (map (fn [ a] (* (first a) (last a))) products))\nIllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:505)\n\neuler.core=> (reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) products)\n(reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) products)\n(913 993)\neuler.core=> (* 913 993)\n(* 913 993)\n906609\neuler.core=> (reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) products)\n(reduce (fn [a b] (if(> (mul-pair a) (mul-pair b)) a b)) products)\n(913 993)\neuler.core=> (def products \n	(filter #(palindrom? (split % 6 )) \n		(for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b))))\n(def products \n        #_=> (filter #(palindrom? (split % 6 )) \n        #_=> (for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b ))))\n#'euler.core/products\neuler.core=> (take 10 products)\n(take 10 products)\n(580085 514415 906609 119911 99990 282282 141141 853358 650056 601106)\neuler.core=> (reduce max products)\n(reduce max products)\n906609\neuler.core=> (max products)\n(max products)\nneuler.core=> 1\n1\n1\neuler.core=> (apply max products)\n(apply max products)\n906609\neuler.core=> (defn products [n] \n	(filter #(palindrom? (split % (* 2 n))) \n		(for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b))))\n\n(def no4 [n] \n	(apply max (products n)))\n\n(defn products [n] \n        #_=> (filter #(palindrom? (split % (* 2 n))) \n        #_=> (for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b ))))\n#'euler.core/products\neuler.core=> \n\neuler.core=> (def no4 [n] \n        #_=> (apply max (products n)))\nCompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(NO_SOURCE_PATH:1:1) \n\neuler.core=> \n\neuler.core=> (defn products [n] \n	(filter #(palindrom? (split % (* 2 n))) \n		(for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b))))\n\n(defn no4 [n] \n	(apply max (products n)))\n(defn products [n] \n        #_=> (filter #(palindrom? (split % (* 2 n))) \n        #_=> (for [a (reverse (range 99 999)) b (reverse (range 99 999))] (* a b ))))\n#'euler.core/products\neuler.core=> \n\neuler.core=> (defn no4 [n] \n        #_=> (apply max (products n)))\n#'euler.core/no4\neuler.core=> (no4 3)\n(no4 3)\n906609\neuler.core=> (defn products [n] \n	(filter #(palindrom? (split % (* 2 n))) \n		(for [a (range 99 999) b (range 99 999)] (* a b))))\n\n(defn no4 [n] \n	(apply max (products n)))\n(defn products [n] \n        #_=> (filter #(palindrom? (split % (* 2 n))) \n        #_=> (for [a (range 99 999) b (range 99 999)] (* a b))))\n#'euler.core/products\neuler.core=> \n\neuler.core=> (defn no4 [n] \n        #_=> (apply max (products n)))\n#'euler.core/no4\neuler.core=> (no4 3)\n(no4 3)\n906609\neuler.core=> (defn products [n] \n	(filter #(palindrom? (split % (* 2 n))) \n		(for [a (range 99 999) b (range 99 999 11)] (* a b))))\n\n(defn no4 [n] \n	(apply max (products n)))\n(defn products [n] \n        #_=> (filter #(palindrom? (split % (* 2 n))) \n        #_=> (for [a (range 99 999) b (range 99 999 11)] (* a b))))\n#'euler.core/products\neuler.core=> \n\neuler.core=> (defn no4 [n] \n        #_=> (apply max (products n)))\n#'euler.core/no4\neuler.core=> (no4 3)\n(no4 3)\n906609\neuler.core=> (defn products [n] \n	(filter #(palindrom? (split % (* 2 n))) \n		(for [a (range 99 999) b (range 99 999 11)] (* a b))))\n\n(defn no4 [n] \n	(apply max (products n)))",
			"settings":
			{
				"buffer_size": 41468,
				"line_ending": "Unix",
				"name": "*REPL* [clojure]",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 180.0,
		"selected_items":
		[
			[
				"leint",
				"Build: Lein: Test"
			],
			[
				"leinr",
				"Build: Lein: Run"
			],
			[
				"gitc",
				"Git: Commit"
			],
			[
				"leinrun",
				"Build: Lein: Run"
			],
			[
				"gitst",
				"Git: Status"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"leir",
				"Build: Lein: Run"
			],
			[
				"leit",
				"Build: Lein: Test"
			],
			[
				"lein run",
				"Build: Lein: Run"
			],
			[
				"lein",
				"Build: Lein: Test"
			],
			[
				"blt",
				"Build: Lein: Test"
			],
			[
				"blr",
				"Build: Lein: Run"
			],
			[
				"leintest",
				"Build: Lein: Test"
			],
			[
				"lein test",
				"Build: Lein: Test"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"lein ",
				"Build: Lein: Uberjar"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Inst",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 153.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/stefc/Projects/euler/test/euler/core_test.clj",
		"/home/stefc/Projects/euler/src/euler/core.clj",
		"/home/stefc/Projects/euler/src/euler/project.clj",
		"/home/stefc/Projects/rubiks-cube/project.clj",
		"/home/stefc/Projects/rubiks-cube/src/rubiks_cube/core.clj",
		"/home/stefc/Projects/rubiks-cube/.gitignore",
		"/home/stefc/Projects/test.clj",
		"/home/stefc/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\n",
			" "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/euler/core.clj",
					"settings":
					{
						"buffer_size": 2450,
						"regions":
						{
						},
						"selection":
						[
							[
								1172,
								1172
							]
						],
						"settings":
						{
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1170.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test/euler/core_test.clj",
					"settings":
					{
						"buffer_size": 279,
						"regions":
						{
						},
						"selection":
						[
							[
								236,
								236
							]
						],
						"settings":
						{
							"syntax": "Packages/Clojure/Clojure.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 41468,
						"regions":
						{
						},
						"selection":
						[
							[
								41307,
								41307
							]
						],
						"settings":
						{
							"auto_complete": true,
							"auto_indent": false,
							"detect_indentation": false,
							"gutter": false,
							"history_arrows": true,
							"indent_subsequent_lines": false,
							"line_numbers": false,
							"repl": true,
							"repl_external_id": "clojure",
							"repl_id": "739f64b734734330bce5d1a5886410e9",
							"smart_indent": false,
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 21566.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 416.0
	},
	"output.git":
	{
		"height": 166.0
	},
	"replace":
	{
		"height": 78.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
